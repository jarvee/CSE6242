-- initial commands
.headers off
.separator ','

-- (a) Import data
-- [insert sql statement(s) below]
CREATE TABLE flights (
	airline text,
	flight_number integer NOT NULL,
	origin_airport text NOT NULL,
	destination_airport text NOT NULL,
	departure_delay integer NOT NULL,
	distance integer NOT NULL,
	arrival_delay integer NOT NULL
);
.import flights.csv flights

CREATE TABLE airports (
	airport_code text NOT NULL,
	airport text NOT NULL,
	city text NOT NULL,
	state text NOT NULL,
	latitude real NOT NULL,
	longitude real NOT NULL
);
.import airports.csv airports

CREATE TABLE airlines (
	airline_code text NOT NULL,
	airline text NOT NULL
);
.import airlines.csv airlines


-- (b) Build indexes
-- [insert sql statement(s) below]
CREATE INDEX flights_airline_index 
ON flights (airline);
CREATE INDEX flights_origin_airport_index 
ON flights (origin_airport);
CREATE INDEX flights_destination_airport_index 
ON flights (destination_airport);
CREATE INDEX airport_airport_index 
ON airports (airport_code);
CREATE INDEX airlines_airline_index 
ON airlines (airline_code);

-- (c) Quick computations.
-- [insert sql statement(s) below]
SELECT
count(*)
FROM 
flights
WHERE 
destination_airport LIKE '%SEA%'
AND 
arrival_delay > 20;

SELECT 
count(*)
FROM 
flights
WHERE 
origin_airport LIKE '%SFO%'
AND 
departure_delay > 20;

select '';

-- (d) Average delay of flights per airline 
-- [insert sql statement(s) below]
SELECT
airlines.airline as air_code,
avg(abs(departure_delay) + arrival_delay) as average_value
FROM
flights
INNER JOIN airlines ON airlines.airline_code = flights.airline
GROUP BY air_code
ORDER BY
average_value DESC
LIMIT 5;

select '';

-- (e) Airlines at each airport
-- [insert sql statement(s) below]
SELECT DISTINCT
airports.airport,
airlines.airline
FROM
flights
INNER JOIN airports ON airports.airport_code = flights.origin_airport
INNER JOIN airlines ON airlines.airline_code = flights.airline
ORDER BY airports.airport,airlines.airline ASC
LIMIT 30;

select '';

-- (f) Percentage of delayed flights
-- [insert sql statement(s) below]
SELECT
airports.airport,
t1.number / t2.total * 100
FROM
	(SELECT destination_airport, count(*)*1.0 as number FROM flights WHERE arrival_delay > 30 GROUP BY destination_airport) t1
INNER JOIN
	(SELECT destination_airport, count(*)*1.0 as total FROM flights GROUP BY destination_airport) t2
ON t1.destination_airport = t2.destination_airport
INNER JOIN airports ON airports.airport_code = t1.destination_airport
LIMIT 20;


select '';

-- (g) Creating a view
-- [insert sql statement(s) below]
CREATE VIEW airport_distances AS
SELECT
A1.airport as airport1_name,
A2.airport as airport2_name,
(A1.latitude - A2.latitude) * (A1.latitude - A2.latitude) as distance
FROM
airports A1
INNER JOIN airports A2
ON airport1_name < airport2_name;

SELECT * FROM airport_distances
ORDER BY distance DESC
LIMIT 10;


select '';

-- (h) Count total pairs 
-- [insert sql statement(s) below]

SELECT COUNT(*) FROM airport_distances;

select '';

-- (i) Create and import data into FTS table movie_overview.
-- [insert sql statement(s) below]
CREATE VIRTUAL TABLE movie_overview USING fts4(
	id integer NOT NULL,
	name text NOT NULL,
	year integer NOT NULL,
	overview text NOT NULL,
	popularity decimal NOT NULL
);
.import movie-overview.txt movie_overview

-- (i) part 1
-- [insert sql statement(s) below]
SELECT COUNT(*) FROM movie_overview WHERE overview MATCH '^when';

select '';

-- (i) part 2
-- [insert sql statement(s) below]
SELECT id FROM movie_overview WHERE overview MATCH 'love NEAR/7 hate'
ORDER BY id ASC;
